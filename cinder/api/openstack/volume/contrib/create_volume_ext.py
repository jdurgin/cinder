# vim: tabstop=4 shiftwidth=4 softtabstop=4

# Copyright (c) 2012 NTT.
# Copyright (c) 2012 OpenStack, LLC.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

"""The Create Volume extension."""

from webob import exc
from xml.dom import minidom

from cinder.api.openstack import extensions
from cinder.api.openstack import wsgi
from cinder.api.openstack import xmlutil
from cinder.openstack.common import log as logging
from cinder.volume import volume_types
from cinder import exception
from cinder import flags
from cinder.openstack.common.rpc import common as rpc_common
from cinder import utils
from cinder import volume


FLAGS = flags.FLAGS
LOG = logging.getLogger(__name__)


authorize = extensions.extension_authorizer('volume', 'create_volume_ext')


def _translate_volume_summary_view(context, vol, image_id):
    d = {}

    d['id'] = vol['id']
    d['status'] = vol['status']
    d['size'] = vol['size']
    d['availability_zone'] = vol['availability_zone']
    d['created_at'] = vol['created_at']

    d['display_name'] = vol['display_name']
    d['display_description'] = vol['display_description']

    if vol['volume_type_id'] and vol.get('volume_type'):
        d['volume_type'] = vol['volume_type']['name']
    else:
        # TODO(bcwaldon): remove str cast once we use uuids
        d['volume_type'] = str(vol['volume_type_id'])

    d['image_id'] = image_id

    LOG.audit(_("vol=%s"), vol, context=context)

    if vol.get('volume_metadata'):
        meta_dict = {}
        for i in vol['volume_metadata']:
            meta_dict[i['key']] = i['value']
        d['metadata'] = meta_dict
    else:
        d['metadata'] = {}

    return d


class VolumeFromImageSerializer(xmlutil.TemplateBuilder):
    def construct(self):
        root = xmlutil.TemplateElement('volume', selector='volume')
        root.set('id')
        root.set('status')
        root.set('size')
        root.set('availability_zone')
        root.set('created_at')
        root.set('display_name')
        root.set('display_description')
        root.set('volume_type')
        metadata = xmlutil.make_flat_dict('metadata')
        root.append(metadata)
        return xmlutil.MasterTemplate(root, 1)


class CreateVolumeExtensionController(wsgi.Controller):
    def __init__(self, *args, **kwargs):
        super(CreateVolumeExtensionController, self).__init__(*args, **kwargs)
        self.volume_api = volume.API()

    def _image_uuid_from_href(self, image_href):
        # If the image href was generated by nova api, strip image_href
        # down to an id.
        try:
            image_uuid = image_href.split('/').pop()
        except (TypeError, AttributeError):
            msg = _("Invalid imageRef provided.")
            raise exc.HTTPBadRequest(explanation=msg)

        if not utils.is_uuid_like(image_uuid):
            msg = _("Invalid imageRef provided.")
            raise exc.HTTPBadRequest(explanation=msg)

        return image_uuid

    @wsgi.response(202)
    @wsgi.serializers(xml=VolumeFromImageSerializer)
    def create(self, req, body):
        """Create a new volume and copy specified image to the volume."""
        context = req.environ['cinder.context']
        authorize(context)
        if not body:
            raise exc.HTTPUnprocessableEntity()

        try:
            params = body['volume']
            volume_size = int(params['size'])
        except (TypeError, KeyError):
            msg = _("Invalid request body")
            raise exc.HTTPBadRequest(explanation=msg)

        volume_name = params.get('display_name')
        volume_desc = params.get('display_description')
        try:
            image_href = params['imageRef']
        except (KeyError, TypeError):
            msg = _("No imageRef was specified in request.")
            raise exc.HTTPBadRequest(explanation=msg)

        image_uuid = self._image_uuid_from_href(image_href)

        kwargs = {}
        req_volume_type = params.get('volume_type', None)
        if req_volume_type:
            try:
                kwargs['volume_type'] = volume_types.get_volume_type_by_name(
                    context, req_volume_type)
            except exception.NotFound:
                raise exc.HTTPNotFound()
        kwargs['metadata'] = params.get('metadata', None)
        kwargs['availability_zone'] = params.get('availability_zone', None)
        try:
            volume = self.volume_api.create_volume_from_image(
                context, volume_size, volume_name, volume_desc, image_uuid,
                **kwargs)
        except exception.ImageNotFound, error:
            raise exc.HTTPNotFound(explanation=unicode(error))
        except exception.ImageNotAuthorized, error:
            raise exc.HTTPBadRequest(explanation=unicode(error))
        except exception.Invalid, error:
            raise exc.HTTPBadRequest(explanation=unicode(error))
        except rpc_common.RemoteError as error:
            msg = "%(err_type)s: %(err_msg)s" % {'err_type': error.exc_type,
                                                 'err_msg': error.value}
            raise exc.HTTPBadRequest(explanation=msg)
        return {'volume': _translate_volume_summary_view(context,
                                                         volume,
                                                         image_uuid)}


class Create_volume_ext(extensions.ExtensionDescriptor):
    """Extended volume support"""

    name = "CreateVolumeExtension"
    alias = "os-create-volume-ext"
    namespace = "http://docs.openstack.org/volume/ext/create-volume-ext/api/v1"
    updated = "2012-08-10T00:00:00+00:00"

    def get_resources(self):
        return [extensions.ResourceExtension('os-create-volume-from-image',
                                controller=CreateVolumeExtensionController())]
